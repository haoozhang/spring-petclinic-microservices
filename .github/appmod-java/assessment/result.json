{
  "azure/observability/spring-boot-actuator-to-azure-monitor.md": "## Spring Boot Actuator with Prometheus Detected\n\n**Problem**: Project uses Spring Boot Actuator with Prometheus metrics registry instead of Azure Monitor integration\n\n**Evidence**:\n- **Actuator Dependencies Found**: Multiple services contain `spring-boot-starter-actuator` dependency:\n  - `spring-petclinic-visits-service/pom.xml:26`\n  - `spring-petclinic-vets-service/pom.xml:35`\n  - `spring-petclinic-genai-service/pom.xml:41`\n  - `spring-petclinic-customers-service/pom.xml:27`\n  - `spring-petclinic-api-gateway/pom.xml:44`\n\n- **Prometheus Registry Dependencies**: Multiple services use Prometheus metrics export:\n  - `spring-petclinic-visits-service/pom.xml:69`: `micrometer-registry-prometheus`\n  - `spring-petclinic-vets-service/pom.xml:90`: `micrometer-registry-prometheus`\n  - `spring-petclinic-genai-service/pom.xml:104`: `micrometer-registry-prometheus`\n  - `spring-petclinic-customers-service/pom.xml:70`: `micrometer-registry-prometheus`\n  - `spring-petclinic-api-gateway/pom.xml:81`: `micrometer-registry-prometheus`\n\n**Impact**: \n- Current setup exports metrics to Prometheus format, not optimized for Azure Monitor\n- Missed opportunity for native Azure Application Insights integration\n- Additional complexity in Azure monitoring setup\n- Potential loss of Azure-specific monitoring features\n\n**Recommendation**: \n- Replace Prometheus registry with Azure Application Insights Spring Boot starter\n- Configure ApplicationInsights connection string\n- Remove Prometheus-specific configurations\n- Leverage native Azure Monitor metrics and distributed tracing capabilities",
  "azure/security-identity-config/properties-secrets-to-azure-key-vault.md": "## API Keys in Configuration Files Detected\n\n**Problem**: Project contains API key configurations that should be managed through Azure Key Vault for enhanced security\n\n**Evidence**:\n- **API Key Configuration Found**: \n  - `spring-petclinic-genai-service/src/main/resources/application.yml:17`: `api-key: ${AZURE_OPENAI_KEY}`\n  - `spring-petclinic-genai-service/src/main/resources/application.yml:25`: `api-key: ${OPENAI_API_KEY:demo}`\n  - `docker-compose.yml:85`: `OPENAI_API_KEY=${OPENAI_API_KEY}`\n\n- **Secret-like Environment Variables**:\n  - `AZURE_OPENAI_KEY` - Azure OpenAI service API key\n  - `OPENAI_API_KEY` - OpenAI API key with fallback value 'demo'\n\n**Impact**: \n- API keys managed as environment variables instead of secure Azure Key Vault\n- Potential security risk if environment variables are exposed\n- Missed opportunity for centralized secret management\n- No secret rotation capabilities from Azure Key Vault\n- Manual secret management across environments\n\n**Recommendation**: \n- Integrate Azure Key Vault Spring Boot starter\n- Store API keys (`AZURE_OPENAI_KEY`, `OPENAI_API_KEY`) in Azure Key Vault\n- Update configuration to reference Key Vault secrets\n- Implement Azure managed identity for secure Key Vault access\n- Remove hardcoded fallback values like 'demo'\n- Leverage Azure Key Vault secret rotation capabilities",
  "azure/security-identity-config/spring-cloud-config-to-app-config-with-feature-flags.md": "## Spring Cloud Config Usage Detected\n\n**Problem**: Project uses Spring Cloud Config Server and clients that should be migrated to Azure App Configuration for better Azure integration and feature flag capabilities\n\n**Evidence**:\n- **Spring Cloud Config Server Found**: \n  - `spring-petclinic-config-server/pom.xml:33`: `spring-cloud-config-server` dependency\n  - `spring-petclinic-config-server/src/main/java/.../ConfigServerApplication.java:20`: `@EnableConfigServer` annotation\n  - `spring-petclinic-config-server/src/main/java/.../ConfigServerApplication.java:25`: Full Config Server implementation\n\n- **Spring Cloud Config Client Dependencies**: Multiple services depend on config server:\n  - `spring-petclinic-visits-service/pom.xml:45`: `spring-cloud-starter-config`\n  - `spring-petclinic-vets-service/pom.xml:54`: `spring-cloud-starter-config`\n  - `spring-petclinic-genai-service/pom.xml:64`: `spring-cloud-starter-config`\n  - `spring-petclinic-discovery-server/pom.xml:37`: `spring-cloud-starter-config`\n  - `spring-petclinic-customers-service/pom.xml:46`: `spring-cloud-starter-config`\n  - `spring-petclinic-api-gateway/pom.xml:63`: `spring-cloud-starter-config`\n  - `spring-petclinic-admin-server/pom.xml:32`: `spring-cloud-starter-config`\n\n- **Configuration Disabled in Tests**: \n  - `spring-petclinic-api-gateway/src/test/resources/application-test.yml:1`: `spring.cloud.config.enabled: false`\n\n**Impact**: \n- Self-hosted configuration server requires additional infrastructure management\n- Missed opportunity for Azure App Configuration's native Azure integration\n- No access to Azure App Configuration feature flags\n- Additional operational complexity for config server deployment and scaling\n- Manual configuration refresh vs Azure App Configuration's real-time updates\n- No Azure AD integration for configuration access control\n\n**Recommendation**: \n- Replace Spring Cloud Config Server with Azure App Configuration\n- Update all client services to use Azure App Configuration Spring Boot starter\n- Migrate configuration data from config server to Azure App Configuration\n- Implement Azure App Configuration feature flags for dynamic configuration\n- Remove spring-cloud-config dependencies and config server service\n- Leverage Azure managed identities for secure configuration access\n- Use Azure App Configuration's real-time configuration updates"
}
